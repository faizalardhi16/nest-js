import { HttpStatus, Injectable } from '@nestjs/common';
import { ICreateCategory } from './interface/ICreateCategory';
import { objectResponse } from 'utils/objectResponse';
import { ResponseInterface } from 'utils/interface/ResponseInterface';
import { PrismaService } from 'src/libs/prisma/prisma.service';
import { autoGeneratedCode } from '../../utils/function/autoGenerateCode';

@Injectable()
export class CategoryService {
    constructor(private prisma: PrismaService){}

    public async createCategory(body: ICreateCategory): Promise<ResponseInterface>
    {
        try {

            const category = await this.prisma.category.create({
                data: {
                    code: autoGeneratedCode(body.title),
                    title: body.title
                }
            });
    
            delete category.createdAt
            delete category.updatedAt

            return objectResponse({
                code: 200,
                status: 'Success',
                message: 'Success to create category',
                data: category
            })
        } catch (error) {
            throw error
        }
    }

    public async findAllCategory(): Promise<ResponseInterface>{
        const category = await this.prisma.category.findMany();

        for(const item of category){
            delete item.id
            delete item.createdAt
            delete item.updatedAt
        }

        return objectResponse({
            code: 200,
            status: 'Success',
            message: 'Success to retrieve category data',
            data: category
        })
    }

    public async removeCategory(id: string): Promise<ResponseInterface>{
        try {

            const result = await this.prisma.category.findUnique({where: {code: id}});

            if(!result){
                return objectResponse({
                    code: HttpStatus.FORBIDDEN,
                    status: 'Failed',
                    message: 'We don`t have any value with code : ' + id,
                    data: null 
                })
            }

            await this.prisma.category.delete({where: {code: id}});

            return objectResponse({
                code: 200,
                status: 'Success',
                message: 'Success to remove data with code : ' + id,
                data: null
            });

        } catch (error) {
            throw error
        }
    }
}
